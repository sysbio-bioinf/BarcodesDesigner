package main.code.ui.model;

import java.io.IOException;

import javafx.fxml.FXMLLoader;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import main.code.controller.WizardController;
import main.code.ui.other.WizardPage;
import main.code.ui.helpers.ResourceLoader;

/**
 * A wizard class that can hold a (context-dependent) sequence of wizard pages
 * and manages their appearance through Previous/Next buttons
 *
 * @author Christoph Muessel, Marietta Hamberger
 *
 */
public class WizardModel {

	GridPane mainWizardPane;

	/**
	 * The first page of the wizard
	 */

	private WizardPage firstPage;
	/**
	 * The current wizard page
	 */
	private WizardPage currentPage;

	private WizardController controller;

	/**
	 * Creates a new wizard object
	 *
	 * @param firstPage
	 *            The first page of the wizard (all further pages must be
	 *            generated by this page)
	 */
	public WizardModel(WizardPage firstPage) throws IOException {
		super();
		this.firstPage = firstPage;
		this.firstPage.setParent(this);

		// initialize content pane
		FXMLLoader tmpLoader = ResourceLoader.getFXML("wizardView");
		mainWizardPane = tmpLoader.load();
		controller = tmpLoader.getController();
		controller.init(this);

		gotoPage(this.firstPage);
	}


	/**
	 * Navigates to the specified page
	 *
	 * @param page The wizard page to display
	 */
	public void gotoPage(WizardPage page) {

		// bind info label to label property of page
		controller.getDescriptionLabel().textProperty().bind(page.label);

		// bind caption of the "Next" button to the corresponding page property
		controller.getNextButton().textProperty().bind(page.nextLabel);

		if (page.getPrev() == null)
		// there is no previous page => disable "Previous" button
		{
			controller.getPrevButton().disableProperty().unbind();
			controller.getPrevButton().setDisable(true);
		} else
			// attach disabled property to the corresponding page property
			controller.getPrevButton().disableProperty().bind(page.disablePrev);

		// similarly, attach disabled properties of the other buttons to page
		// properties
		controller.getCancelButton().disableProperty().bind(page.disableCancel);
		controller.getNextButton().disableProperty().bind(page.disableNext);

		// set page content
		controller.getContentPane().getChildren().clear();
		controller.getContentPane().getChildren().add(page.getContent());

		// resize content to page size
		AnchorPane.setLeftAnchor(page.getContent(), 0.0);
		AnchorPane.setTopAnchor(page.getContent(), 0.0);
		AnchorPane.setRightAnchor(page.getContent(), 0.0);
		AnchorPane.setBottomAnchor(page.getContent(), 0.0);
		currentPage = page;

		// call the page's show handler
		page.showPage();
	}

	/**
	 * Returns the current wizard page
	 *
	 * @return The current wizard page
	 */
	public WizardPage getCurrentPage() {
		return currentPage;
	}

	/**
	 * Navigates to the next wizard page if existing
	 *
	 * @return true if the next page is displayed, false if there is not a next
	 *         page or if the current page did not accept moving to the next page
	 */
	public boolean nextPage() throws IOException {
		if (!currentPage.processNextRequest())
			return false;
		if (currentPage.getNext() == null)
			return false;
		gotoPage(currentPage.getNext());
		return true;
	}

	/**
	 * Navigates to the previous page
	 *
	 * @return true if the next page is displayed, false if there is no previous
	 *         page or if the current page did not accept moving to the previous
	 *         page
	 */
	public boolean prevPage() {
		if (!currentPage.processPrevRequest())
			return false;
		if (currentPage.getPrev() == null)
			return false;
		gotoPage(currentPage.getPrev());
		return true;
	}

	/**
	 * Navigates to the first page of the wizard
	 */
	public void firstPage() {
		gotoPage(firstPage);
	}

	/* GETTER & SETTER */
	public GridPane getMainWizardPane() {
		return mainWizardPane;
	}
}
